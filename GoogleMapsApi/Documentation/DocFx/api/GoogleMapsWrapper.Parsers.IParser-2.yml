### YamlMime:ManagedReference
items:
- uid: GoogleMapsWrapper.Parsers.IParser`2
  commentId: T:GoogleMapsWrapper.Parsers.IParser`2
  id: IParser`2
  parent: GoogleMapsWrapper.Parsers
  children:
  - GoogleMapsWrapper.Parsers.IParser`2.Parse(`1)
  - GoogleMapsWrapper.Parsers.IParser`2.TryParse(`1,`0@)
  langs:
  - csharp
  - vb
  name: IParser<TOutput, TInput>
  nameWithType: IParser<TOutput, TInput>
  fullName: GoogleMapsWrapper.Parsers.IParser<TOutput, TInput>
  type: Interface
  source:
    remote:
      path: GoogleMapsApi/Parsers/IParser.cs
      branch: master
      repo: https://github.com/ScryptSnake/GoogleMapsWrapper
    id: IParser
    path: ../../Parsers/IParser.cs
    startLine: 8
  assemblies:
  - GoogleMapsWrapper
  namespace: GoogleMapsWrapper.Parsers
  syntax:
    content: public interface IParser<TOutput, TInput>
    typeParameters:
    - id: TOutput
    - id: TInput
    content.vb: Public Interface IParser(Of TOutput, TInput)
  nameWithType.vb: IParser(Of TOutput, TInput)
  fullName.vb: GoogleMapsWrapper.Parsers.IParser(Of TOutput, TInput)
  name.vb: IParser(Of TOutput, TInput)
- uid: GoogleMapsWrapper.Parsers.IParser`2.Parse(`1)
  commentId: M:GoogleMapsWrapper.Parsers.IParser`2.Parse(`1)
  id: Parse(`1)
  parent: GoogleMapsWrapper.Parsers.IParser`2
  langs:
  - csharp
  - vb
  name: Parse(TInput)
  nameWithType: IParser<TOutput, TInput>.Parse(TInput)
  fullName: GoogleMapsWrapper.Parsers.IParser<TOutput, TInput>.Parse(TInput)
  type: Method
  source:
    remote:
      path: GoogleMapsApi/Parsers/IParser.cs
      branch: master
      repo: https://github.com/ScryptSnake/GoogleMapsWrapper
    id: Parse
    path: ../../Parsers/IParser.cs
    startLine: 10
  assemblies:
  - GoogleMapsWrapper
  namespace: GoogleMapsWrapper.Parsers
  syntax:
    content: TOutput Parse(TInput input)
    parameters:
    - id: input
      type: '{TInput}'
    return:
      type: '{TOutput}'
    content.vb: Function Parse(input As TInput) As TOutput
  overload: GoogleMapsWrapper.Parsers.IParser`2.Parse*
  nameWithType.vb: IParser(Of TOutput, TInput).Parse(TInput)
  fullName.vb: GoogleMapsWrapper.Parsers.IParser(Of TOutput, TInput).Parse(TInput)
- uid: GoogleMapsWrapper.Parsers.IParser`2.TryParse(`1,`0@)
  commentId: M:GoogleMapsWrapper.Parsers.IParser`2.TryParse(`1,`0@)
  id: TryParse(`1,`0@)
  parent: GoogleMapsWrapper.Parsers.IParser`2
  langs:
  - csharp
  - vb
  name: TryParse(TInput, out TOutput?)
  nameWithType: IParser<TOutput, TInput>.TryParse(TInput, out TOutput?)
  fullName: GoogleMapsWrapper.Parsers.IParser<TOutput, TInput>.TryParse(TInput, out TOutput?)
  type: Method
  source:
    remote:
      path: GoogleMapsApi/Parsers/IParser.cs
      branch: master
      repo: https://github.com/ScryptSnake/GoogleMapsWrapper
    id: TryParse
    path: ../../Parsers/IParser.cs
    startLine: 11
  assemblies:
  - GoogleMapsWrapper
  namespace: GoogleMapsWrapper.Parsers
  syntax:
    content: bool TryParse(TInput input, out TOutput? output)
    parameters:
    - id: input
      type: '{TInput}'
    - id: output
      type: '{TOutput}'
    return:
      type: System.Boolean
    content.vb: Function TryParse(input As TInput, output As TOutput) As Boolean
  overload: GoogleMapsWrapper.Parsers.IParser`2.TryParse*
  nameWithType.vb: IParser(Of TOutput, TInput).TryParse(TInput, TOutput)
  fullName.vb: GoogleMapsWrapper.Parsers.IParser(Of TOutput, TInput).TryParse(TInput, TOutput)
  name.vb: TryParse(TInput, TOutput)
references:
- uid: GoogleMapsWrapper.Parsers
  commentId: N:GoogleMapsWrapper.Parsers
  href: GoogleMapsWrapper.html
  name: GoogleMapsWrapper.Parsers
  nameWithType: GoogleMapsWrapper.Parsers
  fullName: GoogleMapsWrapper.Parsers
  spec.csharp:
  - uid: GoogleMapsWrapper
    name: GoogleMapsWrapper
    href: GoogleMapsWrapper.html
  - name: .
  - uid: GoogleMapsWrapper.Parsers
    name: Parsers
    href: GoogleMapsWrapper.Parsers.html
  spec.vb:
  - uid: GoogleMapsWrapper
    name: GoogleMapsWrapper
    href: GoogleMapsWrapper.html
  - name: .
  - uid: GoogleMapsWrapper.Parsers
    name: Parsers
    href: GoogleMapsWrapper.Parsers.html
- uid: GoogleMapsWrapper.Parsers.IParser`2.Parse*
  commentId: Overload:GoogleMapsWrapper.Parsers.IParser`2.Parse
  href: GoogleMapsWrapper.Parsers.IParser-2.html#GoogleMapsWrapper_Parsers_IParser_2_Parse__1_
  name: Parse
  nameWithType: IParser<TOutput, TInput>.Parse
  fullName: GoogleMapsWrapper.Parsers.IParser<TOutput, TInput>.Parse
  nameWithType.vb: IParser(Of TOutput, TInput).Parse
  fullName.vb: GoogleMapsWrapper.Parsers.IParser(Of TOutput, TInput).Parse
- uid: '{TInput}'
  commentId: '!:TInput'
  definition: TInput
  name: TInput
  nameWithType: TInput
  fullName: TInput
- uid: '{TOutput}'
  commentId: '!:TOutput'
  definition: TOutput
  name: TOutput
  nameWithType: TOutput
  fullName: TOutput
- uid: TInput
  name: TInput
  nameWithType: TInput
  fullName: TInput
- uid: TOutput
  name: TOutput
  nameWithType: TOutput
  fullName: TOutput
- uid: GoogleMapsWrapper.Parsers.IParser`2.TryParse*
  commentId: Overload:GoogleMapsWrapper.Parsers.IParser`2.TryParse
  href: GoogleMapsWrapper.Parsers.IParser-2.html#GoogleMapsWrapper_Parsers_IParser_2_TryParse__1__0__
  name: TryParse
  nameWithType: IParser<TOutput, TInput>.TryParse
  fullName: GoogleMapsWrapper.Parsers.IParser<TOutput, TInput>.TryParse
  nameWithType.vb: IParser(Of TOutput, TInput).TryParse
  fullName.vb: GoogleMapsWrapper.Parsers.IParser(Of TOutput, TInput).TryParse
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
